# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr ""

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr ""

#: ../../faq/gui.rst:18
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr ""

#: ../../faq/gui.rst:20
msgid ""
"Depending on what platform(s) you are aiming at, there are several.  Some of"
" them haven't been ported to Python 3 yet.  At least `Tkinter`_ and `Qt`_ "
"are known to be Python 3-compatible."
msgstr ""

#: ../../faq/gui.rst:27
msgid "Tkinter"
msgstr ""

#: ../../faq/gui.rst:29
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk"
" widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions "
"<https://www.python.org/downloads/>`_ of Python) and use. For more info "
"about Tk, including pointers to the source, see the `Tcl/Tk home page "
"<https://www.tcl.tk>`_.  Tcl/Tk is fully portable to the Mac OS X, Windows, "
"and Unix platforms."
msgstr ""

#: ../../faq/gui.rst:38
msgid "wxWidgets"
msgstr ""

#: ../../faq/gui.rst:40
msgid ""
"wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, Mac OS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""

#: ../../faq/gui.rst:46
msgid ""
"wxPython (http://www.wxpython.org) is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also"
" offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""

#: ../../faq/gui.rst:52
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""

#: ../../faq/gui.rst:58
msgid "Qt"
msgstr ""

#: ../../faq/gui.rst:60
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt "
"<https://riverbankcomputing.com/software/pyqt/intro>`_ or `PySide "
"<https://wiki.qt.io/PySide>`_) and for KDE (`PyKDE4 "
"<https://techbase.kde.org/Languages/Python/Using_PyKDE_4>`__). PyQt is "
"currently more mature than PySide, but you must buy a PyQt license from "
"`Riverbank Computing <https://www.riverbankcomputing.com/commercial/license-"
"faq>`_ if you want to write proprietary applications.  PySide is free for "
"all applications."
msgstr ""

#: ../../faq/gui.rst:67
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses"
" are available from `The Qt Company <https://www.qt.io/licensing/>`_."
msgstr ""

#: ../../faq/gui.rst:71
msgid "Gtk+"
msgstr ""

#: ../../faq/gui.rst:73
msgid ""
"The `GObject introspection bindings "
"<https://wiki.gnome.org/Projects/PyGObject>`_ for Python allow you to write "
"GTK+ 3 applications.  There is also a `Python GTK+ 3 Tutorial <https"
"://python-gtk-3-tutorial.readthedocs.org/en/latest/>`_."
msgstr ""

#: ../../faq/gui.rst:77
msgid ""
"The older PyGtk bindings for the `Gtk+ 2 toolkit <http://www.gtk.org>`_ have"
" been implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""

#: ../../faq/gui.rst:81
msgid "Kivy"
msgstr ""

#: ../../faq/gui.rst:83
msgid ""
"`Kivy <https://kivy.org/>`_ is a cross-platform GUI library supporting both "
"desktop operating systems (Windows, macOS, Linux) and mobile devices "
"(Android, iOS).  It is written in Python and Cython, and can use a range of "
"windowing backends."
msgstr ""

#: ../../faq/gui.rst:88
msgid ""
"Kivy is free and open source software distributed under the MIT license."
msgstr ""

#: ../../faq/gui.rst:91
msgid "FLTK"
msgstr ""

#: ../../faq/gui.rst:93
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the"
" PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""

#: ../../faq/gui.rst:98
msgid "OpenGL"
msgstr ""

#: ../../faq/gui.rst:100
msgid ""
"For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""

#: ../../faq/gui.rst:104
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr ""

#: ../../faq/gui.rst:106
msgid ""
"By installing the `PyObjc Objective-C bridge "
"<https://pythonhosted.org/pyobjc/>`_, Python programs can use Mac OS X's "
"Cocoa libraries."
msgstr ""

#: ../../faq/gui.rst:110
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""

#: ../../faq/gui.rst:116
msgid "Tkinter questions"
msgstr ""

#: ../../faq/gui.rst:119
msgid "How do I freeze Tkinter applications?"
msgstr ""

#: ../../faq/gui.rst:121
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""

#: ../../faq/gui.rst:125
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and "
":envvar:`TK_LIBRARY` environment variables."
msgstr ""

#: ../../faq/gui.rst:129
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library"
" have to be integrated into the application as well. One tool supporting "
"that is SAM (stand-alone modules), which is part of the Tix distribution "
"(http://tix.sourceforge.net/)."
msgstr ""

#: ../../faq/gui.rst:134
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to "
":c:func:`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and"
" link with libtclsam and libtksam (you might include the Tix libraries as "
"well)."
msgstr ""

#: ../../faq/gui.rst:141
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr ""

#: ../../faq/gui.rst:143
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a"
" file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""

#: ../../faq/gui.rst:151
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr ""

#: ../../faq/gui.rst:153
msgid ""
"An often-heard complaint is that event handlers bound to events with the "
":meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""

#: ../../faq/gui.rst:156
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
