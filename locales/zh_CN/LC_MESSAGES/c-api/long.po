# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr ""

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr ""

#: ../../c-api/long.rst:15
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr ""

#: ../../c-api/long.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""

#: ../../c-api/long.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:32
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:38
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or *NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:40
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``, when you create an int in that range "
"you actually just get back a reference to the existing object. So it should "
"be possible to change the value of ``1``.  I suspect the behaviour of Python"
" in this case is undefined. :-)"
msgstr ""

#: ../../c-api/long.rst:49
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`,"
" or *NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:55
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or"
" *NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:61
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"*NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:67
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"*NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:73
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or *NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:79
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"*NULL* on failure."
msgstr ""

#: ../../c-api/long.rst:85
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is "
"non-*NULL*, *\\*pend* will point to the first character in *str* which "
"follows the representation of the number.  If *base* is ``0``, *str* is "
"interpreted using the :ref:`integers` definition; in this case, leading "
"zeros in a non-zero decimal number raises a :exc:`ValueError`. If *base* is "
"not ``0``, it must be between ``2`` and ``36``, inclusive.  Leading spaces "
"and single underscores after a base specifier and between digits are "
"ignored.  If there are no digits, :exc:`ValueError` will be raised."
msgstr ""

#: ../../c-api/long.rst:98
msgid ""
"Convert a sequence of Unicode digits to a Python integer value.  The Unicode"
" string is first encoded to a byte string using "
":c:func:`PyUnicode_EncodeDecimal` and then converted using "
":c:func:`PyLong_FromString`."
msgstr ""

#: ../../c-api/long.rst:104
msgid ""
"Deprecated since version 3.3, will be removed in version 4.0: Part of the "
"old-style Py_UNICODE API; please migrate to using "
"PyLong_FromUnicodeObject()."
msgstr ""

#: ../../c-api/long.rst:104
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyLong_FromUnicodeObject`."
msgstr ""

#: ../../c-api/long.rst:109
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value.  The Unicode string is first encoded to a byte string using "
":c:func:`PyUnicode_EncodeDecimal` and then converted using "
":c:func:`PyLong_FromString`."
msgstr ""

#: ../../c-api/long.rst:119
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""

#: ../../c-api/long.rst:130 ../../c-api/long.rst:140
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:134 ../../c-api/long.rst:159
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long`."
msgstr ""

#: ../../c-api/long.rst:144
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than "
":const:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:155 ../../c-api/long.rst:165
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__int__` method "
"(if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:169
msgid ""
"If the value of *obj* is greater than :const:`PY_LLONG_MAX` or less than "
":const:`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""

#: ../../c-api/long.rst:183
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:186
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`Py_ssize_t`."
msgstr ""

#: ../../c-api/long.rst:196
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:199
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`unsigned long`."
msgstr ""

#: ../../c-api/long.rst:205
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:208
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`size_t`."
msgstr ""

#: ../../c-api/long.rst:217
msgid ""
"Return a C :c:type:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:220
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an "
":c:type:`unsigned long long`."
msgstr ""

#: ../../c-api/long.rst:223
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""

#: ../../c-api/long.rst:229
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is not"
" an instance of :c:type:`PyLongObject`, first call its :meth:`__int__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:233
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, return"
" the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:239
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`__int__`"
" method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:243
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long long`, "
"return the reduction of that value modulo ``PY_ULLONG_MAX + 1``."
msgstr ""

#: ../../c-api/long.rst:249
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:252
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`double`."
msgstr ""

#: ../../c-api/long.rst:258
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If *pylong*"
" cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:type:`void` pointer for values created with "
":c:func:`PyLong_FromVoidPtr`."
msgstr ""
