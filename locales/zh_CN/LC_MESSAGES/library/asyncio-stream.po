# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr ""

#: ../../library/asyncio-stream.rst:12
msgid "Stream functions"
msgstr ""

#: ../../library/asyncio-stream.rst:16
msgid ""
"The top-level functions in this module are meant as convenience wrappers "
"only; there's really nothing special there, and if they don't do exactly "
"what you want, feel free to copy their code."
msgstr ""

#: ../../library/asyncio-stream.rst:23
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a "
"(reader, writer) pair."
msgstr ""

#: ../../library/asyncio-stream.rst:26
msgid ""
"The reader returned is a :class:`StreamReader` instance; the writer is a "
":class:`StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:29
msgid ""
"The arguments are all the usual arguments to "
":meth:`AbstractEventLoop.create_connection` except *protocol_factory*; most "
"common are positional host and port, with various optional keyword arguments"
" following."
msgstr ""

#: ../../library/asyncio-stream.rst:34 ../../library/asyncio-stream.rst:58
msgid ""
"Additional optional keyword arguments are *loop* (to set the event loop "
"instance to use) and *limit* (to set the buffer limit passed to the "
":class:`StreamReader`)."
msgstr ""

#: ../../library/asyncio-stream.rst:38 ../../library/asyncio-stream.rst:62
#: ../../library/asyncio-stream.rst:72 ../../library/asyncio-stream.rst:83
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-stream.rst:42
msgid ""
"Start a socket server, with a callback for each client connected. The return"
" value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:45
msgid ""
"The *client_connected_cb* parameter is called with two parameters: "
"*client_reader*, *client_writer*.  *client_reader* is a "
":class:`StreamReader` object, while *client_writer* is a "
":class:`StreamWriter` object.  The *client_connected_cb* parameter can "
"either be a plain callback function or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"converted into a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:53
msgid ""
"The rest of the arguments are all the usual arguments to "
":meth:`~AbstractEventLoop.create_server()` except *protocol_factory*; most "
"common are positional *host* and *port*, with various optional keyword "
"arguments following."
msgstr ""

#: ../../library/asyncio-stream.rst:66
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning "
"a (reader, writer) pair."
msgstr ""

#: ../../library/asyncio-stream.rst:69
msgid ""
"See :func:`open_connection` for information about return value and other "
"details."
msgstr ""

#: ../../library/asyncio-stream.rst:74 ../../library/asyncio-stream.rst:85
msgid "Availability: UNIX."
msgstr ""

#: ../../library/asyncio-stream.rst:78
msgid ""
"Start a UNIX Domain Socket server, with a callback for each client "
"connected."
msgstr ""

#: ../../library/asyncio-stream.rst:80
msgid ""
"See :func:`start_server` for information about return value and other "
"details."
msgstr ""

#: ../../library/asyncio-stream.rst:89
msgid "StreamReader"
msgstr ""

#: ../../library/asyncio-stream.rst:93 ../../library/asyncio-stream.rst:189
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-stream.rst:97
msgid "Get the exception."
msgstr ""

#: ../../library/asyncio-stream.rst:101
msgid "Acknowledge the EOF."
msgstr ""

#: ../../library/asyncio-stream.rst:105
msgid ""
"Feed *data* bytes in the internal buffer.  Any operations waiting for the "
"data will be resumed."
msgstr ""

#: ../../library/asyncio-stream.rst:110
msgid "Set the exception."
msgstr ""

#: ../../library/asyncio-stream.rst:114
msgid "Set the transport."
msgstr ""

#: ../../library/asyncio-stream.rst:118
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:121 ../../library/asyncio-stream.rst:133
msgid ""
"If the EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:124 ../../library/asyncio-stream.rst:136
#: ../../library/asyncio-stream.rst:145 ../../library/asyncio-stream.rst:223
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../../library/asyncio-stream.rst:128
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:130
msgid ""
"If EOF is received, and ``\\n`` was not found, the method will return the "
"partial read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:140
msgid ""
"Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of "
"the stream is reached before *n* can be read, the "
":attr:`IncompleteReadError.partial` attribute of the exception contains the "
"partial read bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:149
msgid "Read data from the stream until ``separator`` is found."
msgstr ""

#: ../../library/asyncio-stream.rst:151
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:155
msgid ""
"Configured stream limit is used to check result. Limit sets the maximal "
"length of data that can be returned, not counting the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:159
msgid ""
"If an EOF occurs and the complete separator is still not found, an "
":exc:`IncompleteReadError` exception will be raised, and the internal buffer"
" will be reset.  The :attr:`IncompleteReadError.partial` attribute may "
"contain the separator partially."
msgstr ""

#: ../../library/asyncio-stream.rst:165
msgid ""
"If the data cannot be read because of over limit, a :exc:`LimitOverrunError`"
" exception  will be raised, and the data will be left in the internal "
"buffer, so it can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:173
msgid ""
"Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../../library/asyncio-stream.rst:177
msgid "StreamWriter"
msgstr ""

#: ../../library/asyncio-stream.rst:181
msgid "Wraps a Transport."
msgstr ""

#: ../../library/asyncio-stream.rst:183
msgid ""
"This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, "
":meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds "
":meth:`drain` which returns an optional :class:`Future` on which you can "
"wait for flow control.  It also adds a transport attribute which references "
"the :class:`Transport` directly."
msgstr ""

#: ../../library/asyncio-stream.rst:193
msgid "Transport."
msgstr ""

#: ../../library/asyncio-stream.rst:197
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, "
":const:`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""

#: ../../library/asyncio-stream.rst:202
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr ""

#: ../../library/asyncio-stream.rst:206
msgid ""
"Let the write buffer of the underlying transport a chance to be flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:208
msgid "The intended use is to write::"
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid ""
"When the size of the transport buffer reaches the high-water limit (the "
"protocol is paused), block until the size of the buffer is drained down to "
"the low-water limit and the protocol is resumed. When there is nothing to "
"wait for, the yield-from continues immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:218
msgid ""
"Yielding from :meth:`drain` gives the opportunity for the loop to schedule "
"the write operation and flush the buffer. It should especially be used when "
"a possibly large amount of data is written to the transport, and the "
"coroutine does not yield-from between calls to :meth:`write`."
msgstr ""

#: ../../library/asyncio-stream.rst:227
msgid ""
"Return optional transport information: see "
":meth:`BaseTransport.get_extra_info`."
msgstr ""

#: ../../library/asyncio-stream.rst:232
msgid ""
"Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr ""

#: ../../library/asyncio-stream.rst:237
msgid ""
"Write a list (or any iterable) of data bytes to the transport: see "
":meth:`WriteTransport.writelines`."
msgstr ""

#: ../../library/asyncio-stream.rst:242
msgid ""
"Close the write end of the transport after flushing buffered data: see "
":meth:`WriteTransport.write_eof`."
msgstr ""

#: ../../library/asyncio-stream.rst:247
msgid "StreamReaderProtocol"
msgstr ""

#: ../../library/asyncio-stream.rst:251
msgid ""
"Trivial helper class to adapt between :class:`Protocol` and "
":class:`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""

#: ../../library/asyncio-stream.rst:254
msgid ""
"*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* "
"is an optional function called with (stream_reader, stream_writer) when a "
"connection is made, *loop* is the event loop instance to use."
msgstr ""

#: ../../library/asyncio-stream.rst:258
msgid ""
"(This is a helper class instead of making :class:`StreamReader` itself a "
":class:`Protocol` subclass, because the :class:`StreamReader` has other "
"potential uses, and to prevent the user of the :class:`StreamReader` from "
"accidentally calling inappropriate methods of the protocol.)"
msgstr ""

#: ../../library/asyncio-stream.rst:265
msgid "IncompleteReadError"
msgstr ""

#: ../../library/asyncio-stream.rst:269
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr ""

#: ../../library/asyncio-stream.rst:273
msgid "Total number of expected bytes (:class:`int`)."
msgstr ""

#: ../../library/asyncio-stream.rst:277
msgid ""
"Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr ""

#: ../../library/asyncio-stream.rst:281
msgid "LimitOverrunError"
msgstr ""

#: ../../library/asyncio-stream.rst:285
msgid "Reached the buffer limit while looking for a separator."
msgstr ""

#: ../../library/asyncio-stream.rst:289
msgid "Total number of to be consumed bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:293
msgid "Stream examples"
msgstr ""

#: ../../library/asyncio-stream.rst:298
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:300
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:325
msgid ""
"The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:332
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:334
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:370
msgid ""
"The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:375
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:377
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:412
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-stream.rst:416
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:423
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:425
msgid ""
"Coroutine waiting until a socket receives data using the "
":func:`open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:461
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio-register-socket>` example uses a low-level protocol created by the "
":meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:465
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""
