# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/linecache.rst:2
msgid ":mod:`linecache` --- Random access to text lines"
msgstr ""

#: ../../library/linecache.rst:9
msgid "**Source code:** :source:`Lib/linecache.py`"
msgstr ""

#: ../../library/linecache.rst:13
msgid ""
"The :mod:`linecache` module allows one to get any line from a Python source "
"file, while attempting to optimize internally, using a cache, the common "
"case where many lines are read from a single file.  This is used by the "
":mod:`traceback` module to retrieve source lines for inclusion in  the "
"formatted traceback."
msgstr ""

#: ../../library/linecache.rst:18
msgid ""
"The :func:`tokenize.open` function is used to open files. This function uses"
" :func:`tokenize.detect_encoding` to get the encoding of the file; in the "
"absence of an encoding token, the file encoding defaults to UTF-8."
msgstr ""

#: ../../library/linecache.rst:22
msgid "The :mod:`linecache` module defines the following functions:"
msgstr ""

#: ../../library/linecache.rst:27
msgid ""
"Get line *lineno* from file named *filename*. This function will never raise"
" an exception --- it will return ``''`` on errors (the terminating newline "
"character will be included for lines that are found)."
msgstr ""

#: ../../library/linecache.rst:33
msgid ""
"If a file named *filename* is not found, the function will look for it in "
"the module search path, ``sys.path``, after first checking for a :pep:`302` "
"``__loader__`` in *module_globals*, in case the module was imported from a "
"zipfile or other non-filesystem import source."
msgstr ""

#: ../../library/linecache.rst:41
msgid ""
"Clear the cache.  Use this function if you no longer need lines from files "
"previously read using :func:`getline`."
msgstr ""

#: ../../library/linecache.rst:47
msgid ""
"Check the cache for validity.  Use this function if files in the cache  may "
"have changed on disk, and you require the updated version.  If *filename* is"
" omitted, it will check all the entries in the cache."
msgstr ""

#: ../../library/linecache.rst:53
msgid ""
"Capture enough detail about a non-file-based module to permit getting its "
"lines later via :func:`getline` even if *module_globals* is ``None`` in the "
"later call. This avoids doing I/O until a line is actually needed, without "
"having to carry the module globals around indefinitely."
msgstr ""

#: ../../library/linecache.rst:60
msgid "Example::"
msgstr ""
