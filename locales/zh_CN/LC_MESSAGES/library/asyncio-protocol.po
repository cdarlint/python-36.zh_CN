# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-protocol.rst:5
msgid "Transports and protocols (callback based API)"
msgstr ""

#: ../../library/asyncio-protocol.rst:7
msgid "**Source code:** :source:`Lib/asyncio/transports.py`"
msgstr ""

#: ../../library/asyncio-protocol.rst:9
msgid "**Source code:** :source:`Lib/asyncio/protocols.py`"
msgstr ""

#: ../../library/asyncio-protocol.rst:14
msgid "Transports"
msgstr ""

#: ../../library/asyncio-protocol.rst:16
msgid ""
"Transports are classes provided by :mod:`asyncio` in order to abstract "
"various kinds of communication channels.  You generally won't instantiate a "
"transport yourself; instead, you will call an :class:`AbstractEventLoop` "
"method which will create the transport and try to initiate the underlying "
"communication channel, calling you back when it succeeds."
msgstr ""

#: ../../library/asyncio-protocol.rst:22
msgid ""
"Once the communication channel is established, a transport is always paired "
"with a :ref:`protocol <asyncio-protocol>` instance.  The protocol can then "
"call the transport's methods for various purposes."
msgstr ""

#: ../../library/asyncio-protocol.rst:26
msgid ""
":mod:`asyncio` currently implements transports for TCP, UDP, SSL, and "
"subprocess pipes.  The methods available on a transport depend on the "
"transport's kind."
msgstr ""

#: ../../library/asyncio-protocol.rst:30
msgid ""
"The transport classes are :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-protocol.rst:32
msgid "The socket option ``TCP_NODELAY`` is now set by default."
msgstr ""

#: ../../library/asyncio-protocol.rst:37
msgid "BaseTransport"
msgstr ""

#: ../../library/asyncio-protocol.rst:41
msgid "Base class for transports."
msgstr ""

#: ../../library/asyncio-protocol.rst:45
msgid ""
"Close the transport.  If the transport has a buffer for outgoing data, "
"buffered data will be flushed asynchronously.  No more data will be "
"received.  After all buffered data is flushed, the protocol's "
":meth:`connection_lost` method will be called with :const:`None` as its "
"argument."
msgstr ""

#: ../../library/asyncio-protocol.rst:53
msgid "Return ``True`` if the transport is closing or is closed."
msgstr ""

#: ../../library/asyncio-protocol.rst:59
msgid ""
"Return optional transport information.  *name* is a string representing the "
"piece of transport-specific information to get, *default* is the value to "
"return if the information doesn't exist."
msgstr ""

#: ../../library/asyncio-protocol.rst:63
msgid ""
"This method allows transport implementations to easily expose channel-"
"specific information."
msgstr ""

#: ../../library/asyncio-protocol.rst:66
msgid "socket:"
msgstr ""

#: ../../library/asyncio-protocol.rst:68
msgid ""
"``'peername'``: the remote address to which the socket is connected, result "
"of :meth:`socket.socket.getpeername` (``None`` on error)"
msgstr ""

#: ../../library/asyncio-protocol.rst:70
msgid "``'socket'``: :class:`socket.socket` instance"
msgstr ""

#: ../../library/asyncio-protocol.rst:71
msgid ""
"``'sockname'``: the socket's own address, result of "
":meth:`socket.socket.getsockname`"
msgstr ""

#: ../../library/asyncio-protocol.rst:74
msgid "SSL socket:"
msgstr ""

#: ../../library/asyncio-protocol.rst:76
msgid ""
"``'compression'``: the compression algorithm being used as a string, or "
"``None`` if the connection isn't compressed; result of "
":meth:`ssl.SSLSocket.compression`"
msgstr ""

#: ../../library/asyncio-protocol.rst:79
msgid ""
"``'cipher'``: a three-value tuple containing the name of the cipher being "
"used, the version of the SSL protocol that defines its use, and the number "
"of secret bits being used; result of :meth:`ssl.SSLSocket.cipher`"
msgstr ""

#: ../../library/asyncio-protocol.rst:83
msgid ""
"``'peercert'``: peer certificate; result of "
":meth:`ssl.SSLSocket.getpeercert`"
msgstr ""

#: ../../library/asyncio-protocol.rst:85
msgid "``'sslcontext'``: :class:`ssl.SSLContext` instance"
msgstr ""

#: ../../library/asyncio-protocol.rst:86
msgid ""
"``'ssl_object'``: :class:`ssl.SSLObject` or :class:`ssl.SSLSocket` instance"
msgstr ""

#: ../../library/asyncio-protocol.rst:89
msgid "pipe:"
msgstr ""

#: ../../library/asyncio-protocol.rst:91
msgid "``'pipe'``: pipe object"
msgstr ""

#: ../../library/asyncio-protocol.rst:93
msgid "subprocess:"
msgstr ""

#: ../../library/asyncio-protocol.rst:95
msgid "``'subprocess'``: :class:`subprocess.Popen` instance"
msgstr ""

#: ../../library/asyncio-protocol.rst:99
msgid ""
"Set a new protocol.  Switching protocol should only be done when both "
"protocols are documented to support the switch."
msgstr ""

#: ../../library/asyncio-protocol.rst:106
msgid "Return the current protocol."
msgstr ""

#: ../../library/asyncio-protocol.rst:110
msgid "``'ssl_object'`` info was added to SSL sockets."
msgstr ""

#: ../../library/asyncio-protocol.rst:115
msgid "ReadTransport"
msgstr ""

#: ../../library/asyncio-protocol.rst:119
msgid "Interface for read-only transports."
msgstr ""

#: ../../library/asyncio-protocol.rst:123
msgid ""
"Pause the receiving end of the transport.  No data will be passed to the "
"protocol's :meth:`data_received` method until :meth:`resume_reading` is "
"called."
msgstr ""

#: ../../library/asyncio-protocol.rst:129
msgid ""
"Resume the receiving end.  The protocol's :meth:`data_received` method will "
"be called once again if some data is available for reading."
msgstr ""

#: ../../library/asyncio-protocol.rst:134
msgid "WriteTransport"
msgstr ""

#: ../../library/asyncio-protocol.rst:138
msgid "Interface for write-only transports."
msgstr ""

#: ../../library/asyncio-protocol.rst:142
#: ../../library/asyncio-protocol.rst:230
msgid ""
"Close the transport immediately, without waiting for pending operations to "
"complete.  Buffered data will be lost.  No more data will be received. The "
"protocol's :meth:`connection_lost` method will eventually be called with "
":const:`None` as its argument."
msgstr ""

#: ../../library/asyncio-protocol.rst:149
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, "
":const:`False` if not."
msgstr ""

#: ../../library/asyncio-protocol.rst:154
msgid "Return the current size of the output buffer used by the transport."
msgstr ""

#: ../../library/asyncio-protocol.rst:158
msgid ""
"Get the *high*- and *low*-water limits for write flow control. Return a "
"tuple ``(low, high)`` where *low* and *high* are positive number of bytes."
msgstr ""

#: ../../library/asyncio-protocol.rst:162
msgid "Use :meth:`set_write_buffer_limits` to set the limits."
msgstr ""

#: ../../library/asyncio-protocol.rst:168
msgid "Set the *high*- and *low*-water limits for write flow control."
msgstr ""

#: ../../library/asyncio-protocol.rst:170
msgid ""
"These two values (measured in number of bytes) control when the protocol's "
":meth:`pause_writing` and :meth:`resume_writing` methods are called. If "
"specified, the low-water limit must be less than or equal to the high-water "
"limit.  Neither *high* nor *low* can be negative."
msgstr ""

#: ../../library/asyncio-protocol.rst:176
msgid ""
":meth:`pause_writing` is called when the buffer size becomes greater than or"
" equal to the *high* value. If writing has been paused, "
":meth:`resume_writing` is called when the buffer size becomes less than or "
"equal to the *low* value."
msgstr ""

#: ../../library/asyncio-protocol.rst:181
msgid ""
"The defaults are implementation-specific.  If only the high-water limit is "
"given, the low-water limit defaults to an implementation-specific value less"
" than or equal to the high-water limit.  Setting *high* to zero forces *low*"
" to zero as well, and causes :meth:`pause_writing` to be called whenever the"
" buffer becomes non-empty.  Setting *low* to zero causes "
":meth:`resume_writing` to be called only once the buffer is empty. Use of "
"zero for either limit is generally sub-optimal as it reduces opportunities "
"for doing I/O and computation concurrently."
msgstr ""

#: ../../library/asyncio-protocol.rst:192
msgid "Use :meth:`get_write_buffer_limits` to get the limits."
msgstr ""

#: ../../library/asyncio-protocol.rst:196
msgid "Write some *data* bytes to the transport."
msgstr ""

#: ../../library/asyncio-protocol.rst:198
#: ../../library/asyncio-protocol.rst:225
msgid ""
"This method does not block; it buffers the data and arranges for it to be "
"sent out asynchronously."
msgstr ""

#: ../../library/asyncio-protocol.rst:203
msgid ""
"Write a list (or any iterable) of data bytes to the transport. This is "
"functionally equivalent to calling :meth:`write` on each element yielded by "
"the iterable, but may be implemented more efficiently."
msgstr ""

#: ../../library/asyncio-protocol.rst:209
msgid ""
"Close the write end of the transport after flushing buffered data. Data may "
"still be received."
msgstr ""

#: ../../library/asyncio-protocol.rst:212
msgid ""
"This method can raise :exc:`NotImplementedError` if the transport (e.g. SSL)"
" doesn't support half-closes."
msgstr ""

#: ../../library/asyncio-protocol.rst:217
msgid "DatagramTransport"
msgstr ""

#: ../../library/asyncio-protocol.rst:221
msgid ""
"Send the *data* bytes to the remote peer given by *addr* (a transport-"
"dependent target address).  If *addr* is :const:`None`, the data is sent to "
"the target address given on transport creation."
msgstr ""

#: ../../library/asyncio-protocol.rst:237
msgid "BaseSubprocessTransport"
msgstr ""

#: ../../library/asyncio-protocol.rst:243
msgid "Return the subprocess process id as an integer."
msgstr ""

#: ../../library/asyncio-protocol.rst:247
msgid ""
"Return the transport for the communication pipe corresponding to the integer"
" file descriptor *fd*:"
msgstr ""

#: ../../library/asyncio-protocol.rst:250
msgid ""
"``0``: readable streaming transport of the standard input (*stdin*), or "
":const:`None` if the subprocess was not created with ``stdin=PIPE``"
msgstr ""

#: ../../library/asyncio-protocol.rst:252
msgid ""
"``1``: writable streaming transport of the standard output (*stdout*), or "
":const:`None` if the subprocess was not created with ``stdout=PIPE``"
msgstr ""

#: ../../library/asyncio-protocol.rst:254
msgid ""
"``2``: writable streaming transport of the standard error (*stderr*), or "
":const:`None` if the subprocess was not created with ``stderr=PIPE``"
msgstr ""

#: ../../library/asyncio-protocol.rst:256
msgid "other *fd*: :const:`None`"
msgstr ""

#: ../../library/asyncio-protocol.rst:260
msgid ""
"Return the subprocess returncode as an integer or :const:`None` if it hasn't"
" returned, similarly to the :attr:`subprocess.Popen.returncode` attribute."
msgstr ""

#: ../../library/asyncio-protocol.rst:266
msgid "Kill the subprocess, as in :meth:`subprocess.Popen.kill`."
msgstr ""

#: ../../library/asyncio-protocol.rst:268
msgid ""
"On POSIX systems, the function sends SIGKILL to the subprocess. On Windows, "
"this method is an alias for :meth:`terminate`."
msgstr ""

#: ../../library/asyncio-protocol.rst:273
msgid ""
"Send the *signal* number to the subprocess, as in "
":meth:`subprocess.Popen.send_signal`."
msgstr ""

#: ../../library/asyncio-protocol.rst:278
msgid ""
"Ask the subprocess to stop, as in :meth:`subprocess.Popen.terminate`. This "
"method is an alias for the :meth:`close` method."
msgstr ""

#: ../../library/asyncio-protocol.rst:281
msgid ""
"On POSIX systems, this method sends SIGTERM to the subprocess. On Windows, "
"the Windows API function TerminateProcess() is called to stop the "
"subprocess."
msgstr ""

#: ../../library/asyncio-protocol.rst:287
msgid ""
"Ask the subprocess to stop by calling the :meth:`terminate` method if the "
"subprocess hasn't returned yet, and close transports of all pipes (*stdin*, "
"*stdout* and *stderr*)."
msgstr ""

#: ../../library/asyncio-protocol.rst:295
msgid "Protocols"
msgstr ""

#: ../../library/asyncio-protocol.rst:297
msgid ""
":mod:`asyncio` provides base classes that you can subclass to implement your"
" network protocols.  Those classes are used in conjunction with "
":ref:`transports <asyncio-transport>` (see below): the protocol parses "
"incoming data and asks for the writing of outgoing data, while the transport"
" is responsible for the actual I/O and buffering."
msgstr ""

#: ../../library/asyncio-protocol.rst:303
msgid ""
"When subclassing a protocol class, it is recommended you override certain "
"methods.  Those methods are callbacks: they will be called by the transport "
"on certain events (for example when some data is received); you shouldn't "
"call them yourself, unless you are implementing a transport."
msgstr ""

#: ../../library/asyncio-protocol.rst:309
msgid ""
"All callbacks have default implementations, which are empty.  Therefore, you"
" only need to implement the callbacks for the events in which you are "
"interested."
msgstr ""

#: ../../library/asyncio-protocol.rst:315
msgid "Protocol classes"
msgstr ""

#: ../../library/asyncio-protocol.rst:319
msgid ""
"The base class for implementing streaming protocols (for use with e.g. TCP "
"and SSL transports)."
msgstr ""

#: ../../library/asyncio-protocol.rst:324
msgid ""
"The base class for implementing datagram protocols (for use with e.g. UDP "
"transports)."
msgstr ""

#: ../../library/asyncio-protocol.rst:329
msgid ""
"The base class for implementing protocols communicating with child processes"
" (through a set of unidirectional pipes)."
msgstr ""

#: ../../library/asyncio-protocol.rst:334
msgid "Connection callbacks"
msgstr ""

#: ../../library/asyncio-protocol.rst:336
#: ../../library/asyncio-protocol.rst:448
msgid ""
"These callbacks may be called on :class:`Protocol`, "
":class:`DatagramProtocol` and :class:`SubprocessProtocol` instances:"
msgstr ""

#: ../../library/asyncio-protocol.rst:341
msgid "Called when a connection is made."
msgstr ""

#: ../../library/asyncio-protocol.rst:343
msgid ""
"The *transport* argument is the transport representing the connection.  You "
"are responsible for storing it somewhere (e.g. as an attribute) if you need "
"to."
msgstr ""

#: ../../library/asyncio-protocol.rst:349
msgid "Called when the connection is lost or closed."
msgstr ""

#: ../../library/asyncio-protocol.rst:351
msgid ""
"The argument is either an exception object or :const:`None`. The latter "
"means a regular EOF is received, or the connection was aborted or closed by "
"this side of the connection."
msgstr ""

#: ../../library/asyncio-protocol.rst:355
msgid ""
":meth:`~BaseProtocol.connection_made` and "
":meth:`~BaseProtocol.connection_lost` are called exactly once per successful"
" connection.  All other callbacks will be called between those two methods, "
"which allows for easier resource management in your protocol implementation."
msgstr ""

#: ../../library/asyncio-protocol.rst:360
msgid ""
"The following callbacks may be called only on :class:`SubprocessProtocol` "
"instances:"
msgstr ""

#: ../../library/asyncio-protocol.rst:365
msgid ""
"Called when the child process writes data into its stdout or stderr pipe. "
"*fd* is the integer file descriptor of the pipe.  *data* is a non-empty "
"bytes object containing the data."
msgstr ""

#: ../../library/asyncio-protocol.rst:371
msgid ""
"Called when one of the pipes communicating with the child process is closed."
"  *fd* is the integer file descriptor that was closed."
msgstr ""

#: ../../library/asyncio-protocol.rst:376
msgid "Called when the child process has exited."
msgstr ""

#: ../../library/asyncio-protocol.rst:380
msgid "Streaming protocols"
msgstr ""

#: ../../library/asyncio-protocol.rst:382
msgid "The following callbacks are called on :class:`Protocol` instances:"
msgstr ""

#: ../../library/asyncio-protocol.rst:386
msgid ""
"Called when some data is received.  *data* is a non-empty bytes object "
"containing the incoming data."
msgstr ""

#: ../../library/asyncio-protocol.rst:390
msgid ""
"Whether the data is buffered, chunked or reassembled depends on the "
"transport.  In general, you shouldn't rely on specific semantics and instead"
" make your parsing generic and flexible enough.  However, data is always "
"received in the correct order."
msgstr ""

#: ../../library/asyncio-protocol.rst:397
msgid ""
"Called when the other end signals it won't send any more data (for example "
"by calling :meth:`write_eof`, if the other end also uses asyncio)."
msgstr ""

#: ../../library/asyncio-protocol.rst:401
msgid ""
"This method may return a false value (including ``None``), in which case the"
" transport will close itself.  Conversely, if this method returns a true "
"value, closing the transport is up to the protocol.  Since the default "
"implementation returns ``None``, it implicitly closes the connection."
msgstr ""

#: ../../library/asyncio-protocol.rst:407
msgid ""
"Some transports such as SSL don't support half-closed connections, in which "
"case returning true from this method will not prevent closing the "
"connection."
msgstr ""

#: ../../library/asyncio-protocol.rst:411
msgid ""
":meth:`data_received` can be called an arbitrary number of times during a "
"connection.  However, :meth:`eof_received` is called at most once and, if "
"called, :meth:`data_received` won't be called after it."
msgstr ""

#: ../../library/asyncio-protocol.rst:415
msgid "State machine:"
msgstr ""

#: ../../library/asyncio-protocol.rst:417
msgid ""
"start -> :meth:`~BaseProtocol.connection_made` [-> "
":meth:`~Protocol.data_received` \\*] [-> :meth:`~Protocol.eof_received` ?] "
"-> :meth:`~BaseProtocol.connection_lost` -> end"
msgstr ""

#: ../../library/asyncio-protocol.rst:424
msgid "Datagram protocols"
msgstr ""

#: ../../library/asyncio-protocol.rst:426
msgid ""
"The following callbacks are called on :class:`DatagramProtocol` instances."
msgstr ""

#: ../../library/asyncio-protocol.rst:430
msgid ""
"Called when a datagram is received.  *data* is a bytes object containing the"
" incoming data.  *addr* is the address of the peer sending the data; the "
"exact format depends on the transport."
msgstr ""

#: ../../library/asyncio-protocol.rst:436
msgid ""
"Called when a previous send or receive operation raises an :class:`OSError`."
"  *exc* is the :class:`OSError` instance."
msgstr ""

#: ../../library/asyncio-protocol.rst:439
msgid ""
"This method is called in rare conditions, when the transport (e.g. UDP) "
"detects that a datagram couldn't be delivered to its recipient. In many "
"conditions though, undeliverable datagrams will be silently dropped."
msgstr ""

#: ../../library/asyncio-protocol.rst:446
msgid "Flow control callbacks"
msgstr ""

#: ../../library/asyncio-protocol.rst:453
msgid "Called when the transport's buffer goes over the high-water mark."
msgstr ""

#: ../../library/asyncio-protocol.rst:457
msgid "Called when the transport's buffer drains below the low-water mark."
msgstr ""

#: ../../library/asyncio-protocol.rst:460
msgid ""
":meth:`pause_writing` and :meth:`resume_writing` calls are paired -- "
":meth:`pause_writing` is called once when the buffer goes strictly over the "
"high-water mark (even if subsequent writes increases the buffer size even "
"more), and eventually :meth:`resume_writing` is called once when the buffer "
"size reaches the low-water mark."
msgstr ""

#: ../../library/asyncio-protocol.rst:467
msgid ""
"If the buffer size equals the high-water mark, :meth:`pause_writing` is not "
"called -- it must go strictly over. Conversely, :meth:`resume_writing` is "
"called when the buffer size is equal or lower than the low-water mark.  "
"These end conditions are important to ensure that things go as expected when"
" either mark is zero."
msgstr ""

#: ../../library/asyncio-protocol.rst:475
msgid ""
"On BSD systems (OS X, FreeBSD, etc.) flow control is not supported for "
":class:`DatagramProtocol`, because send failures caused by writing too many "
"packets cannot be detected easily.  The socket always appears 'ready' and "
"excess packets are dropped; an :class:`OSError` with errno set to "
":const:`errno.ENOBUFS` may or may not be raised; if it is raised, it will be"
" reported to :meth:`DatagramProtocol.error_received` but otherwise ignored."
msgstr ""

#: ../../library/asyncio-protocol.rst:485
msgid "Coroutines and protocols"
msgstr ""

#: ../../library/asyncio-protocol.rst:487
msgid ""
"Coroutines can be scheduled in a protocol method using "
":func:`ensure_future`, but there is no guarantee made about the execution "
"order.  Protocols are not aware of coroutines created in protocol methods "
"and so will not wait for them."
msgstr ""

#: ../../library/asyncio-protocol.rst:491
msgid ""
"To have a reliable execution order, use :ref:`stream objects <asyncio-"
"streams>` in a coroutine with ``yield from``. For example, the "
":meth:`StreamWriter.drain` coroutine can be used to wait until the write "
"buffer is flushed."
msgstr ""

#: ../../library/asyncio-protocol.rst:497
msgid "Protocol examples"
msgstr ""

#: ../../library/asyncio-protocol.rst:502
msgid "TCP echo client protocol"
msgstr ""

#: ../../library/asyncio-protocol.rst:504
msgid ""
"TCP echo client  using the :meth:`AbstractEventLoop.create_connection` "
"method, send data and wait until the connection is closed::"
msgstr ""

#: ../../library/asyncio-protocol.rst:534
msgid ""
"The event loop is running twice. The "
":meth:`~AbstractEventLoop.run_until_complete` method is preferred in this "
"short example to raise an exception if the server is not listening, instead "
"of having to write a short coroutine to handle the exception and stop the "
"running loop. At :meth:`~AbstractEventLoop.run_until_complete` exit, the "
"loop is no longer running, so there is no need to stop the loop in case of "
"an error."
msgstr ""

#: ../../library/asyncio-protocol.rst:543
msgid ""
"The :ref:`TCP echo client using streams <asyncio-tcp-echo-client-streams>` "
"example uses the :func:`asyncio.open_connection` function."
msgstr ""

#: ../../library/asyncio-protocol.rst:550
msgid "TCP echo server protocol"
msgstr ""

#: ../../library/asyncio-protocol.rst:552
msgid ""
"TCP echo server using the :meth:`AbstractEventLoop.create_server` method, "
"send back received data and close the connection::"
msgstr ""

#: ../../library/asyncio-protocol.rst:590
msgid ""
":meth:`Transport.close` can be called immediately after "
":meth:`WriteTransport.write` even if data are not sent yet on the socket: "
"both methods are asynchronous. ``yield from`` is not needed because these "
"transport methods are not coroutines."
msgstr ""

#: ../../library/asyncio-protocol.rst:597
msgid ""
"The :ref:`TCP echo server using streams <asyncio-tcp-echo-server-streams>` "
"example uses the :func:`asyncio.start_server` function."
msgstr ""

#: ../../library/asyncio-protocol.rst:604
msgid "UDP echo client protocol"
msgstr ""

#: ../../library/asyncio-protocol.rst:606
msgid ""
"UDP echo client using the :meth:`AbstractEventLoop.create_datagram_endpoint`"
" method, send data and close the transport when we received the answer::"
msgstr ""

#: ../../library/asyncio-protocol.rst:650
msgid "UDP echo server protocol"
msgstr ""

#: ../../library/asyncio-protocol.rst:652
msgid ""
"UDP echo server using the :meth:`AbstractEventLoop.create_datagram_endpoint`"
" method, send back received data::"
msgstr ""

#: ../../library/asyncio-protocol.rst:686
msgid "Register an open socket to wait for data using a protocol"
msgstr ""

#: ../../library/asyncio-protocol.rst:688
msgid ""
"Wait until a socket receives data using the "
":meth:`AbstractEventLoop.create_connection` method with a protocol, and then"
" close the event loop ::"
msgstr ""

#: ../../library/asyncio-protocol.rst:735
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""

#: ../../library/asyncio-protocol.rst:740
msgid ""
"The :ref:`register an open socket to wait for data using streams <asyncio-"
"register-socket-streams>` example uses high-level streams created by the "
":func:`open_connection` function in a coroutine."
msgstr ""
