# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Jerry Chen <jerrychen9657@gmail.com>, 2017\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "Python 的非正式介绍"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears;"
" lines that do not begin with a prompt are output from the interpreter. Note"
" that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"在下面的例子中，通过提示符的出现与否来区分输入和输出(:term:`>>>` and "
":term:`...`)：如果你想复现这些例子，当提示符出现后，你必须在提示符后键入例子中的每一个词；不以提示符开头的那些行是解释器的输出。注意例子中某行中出现第二个提示符意味着你必须键入一个空白行；这是用来结束多行命令的。"

#: ../../tutorial/introduction.rst:14
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character,"
" ``#``, and extend to the end of the physical line.  A comment may appear at"
" the start of a line or following whitespace or code, but not within a "
"string literal.  A hash character within a string literal is just a hash "
"character. Since comments are to clarify code and are not interpreted by "
"Python, they may be omitted when typing in examples."
msgstr ""
"这个手册中的许多例子都包含注释，甚至交互性命令中也有。Python中的注释以井号，``#``，开头，并且一直延伸到该文本行结束为止。注释可以出现在一行的开头或者是空白和代码的后边，但是不能出现在字符串中间。字符串中的井号就是井号。因为注释是用来阐明代码的，不会被Python解释，所以在键入这些例子时，注释是可以被忽略的。"

#: ../../tutorial/introduction.rst:22
msgid "Some examples::"
msgstr "几个例子::"

#: ../../tutorial/introduction.rst:33
msgid "Using Python as a Calculator"
msgstr "Python 作为计算器使用"

#: ../../tutorial/introduction.rst:35
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr "让我们尝试一些简单的 Python 命令。启动解释器，等待界面中的提示符，``>>>`` （这应该花不了多少时间）。"

#: ../../tutorial/introduction.rst:42
msgid "Numbers"
msgstr "数字"

#: ../../tutorial/introduction.rst:44
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""
"解释器就像一个简单的计算器一样：你可以在里面输入一个表达式然后它会写出答案。表达式的语法很直接：运算符``+``、``-``、``*``、``/``的用法和其他大部分语言一样（比如，Pascal"
" 或者 C 语言）；括号（``()``）用来分组。比如::"

#: ../../tutorial/introduction.rst:59
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type "
":class:`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"整数（比如``2``、``4``、``20``）有 :class:`int` 类型，有小数部分的（比如``5.0``、``1.6``）有 "
":class:`float` 类型。在这个手册的后半部分我们会看到更多的数值类型。"

#: ../../tutorial/introduction.rst:63
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result (discarding any fractional result) you can use the "
"``//`` operator; to calculate the remainder you can use ``%``::"
msgstr ""
"除法运算（``/``）永远返回浮点数类型。如果要做 :term:`floor division` 得到一个整数结果（忽略小数部分）你可以使用 "
"``//`` 运算符；如果要计算余数，可以使用 ``%``::"

#: ../../tutorial/introduction.rst:77
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr "在Python中，可以使用 ``**`` 运算符来计算乘方 [#]_::"

#: ../../tutorial/introduction.rst:84
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr "等号（``=``）用于给一个变量赋值。然后在喜爱个交互命令之前不会有结果显示出来::"

#: ../../tutorial/introduction.rst:92
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr "如果一个变量未定义(未赋值)，试图使用它时会向你提示错误::"

#: ../../tutorial/introduction.rst:100
msgid ""
"There is full support for floating point; operators with mixed type operands"
" convert the integer operand to floating point::"
msgstr "Python中提供浮点数的完整支持；包含多种混合类型运算数的运算会把整数转换为浮点数::"

#: ../../tutorial/introduction.rst:106
msgid ""
"In interactive mode, the last printed expression is assigned to the variable"
" ``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr "在交互模式下，最后打印出来的表达式被赋值给变量``_``。这意味着当你把Python用作桌面计算器时，继续计算会相对简单，比如::"

#: ../../tutorial/introduction.rst:119
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with"
" the same name masking the built-in variable with its magic behavior."
msgstr "这个变量应该被使用者当作是只读类型。不要向它显式地赋值——你会创建一个和它名字相同独立的本地变量，它会使用魔法行为屏蔽内部变量。"

#: ../../tutorial/introduction.rst:123
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`. Python also has built-in support for "
":ref:`complex numbers <typesnumeric>`, and uses the ``j`` or ``J`` suffix to"
" indicate the imaginary part (e.g. ``3+5j``)."
msgstr ""
"除了 :class:`int` 和 :class:`float`，Python也支持其他类型的数字，例如 "
":class:`~decimal.Decimal` 或者 :class:`~fractions.Fraction`。Python 也内置对 "
":ref:`复数 <typesnumeric>` 的支持，使用后缀 ``j`` 或者 ``J`` 就可以表示虚数部分（例如 ``3+5j``）。"

#: ../../tutorial/introduction.rst:133
msgid "Strings"
msgstr "字符串"

#: ../../tutorial/introduction.rst:135
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""
"除了数字，Python 也可以操作字符串。字符串有多种形式，可以使用单引号（``'……'``），双引号（``\"……\"``）都可以获得同样的结果 "
"[#]_。反斜杠 ``\\`` 可以用来转义::"

#: ../../tutorial/introduction.rst:153
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes"
" look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""

#: ../../tutorial/introduction.rst:173
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special"
" characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""

#: ../../tutorial/introduction.rst:183
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\``"
" at the end of the line.  The following example::"
msgstr ""

#: ../../tutorial/introduction.rst:194
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""

#: ../../tutorial/introduction.rst:202
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""

#: ../../tutorial/introduction.rst:209
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""

#: ../../tutorial/introduction.rst:215
msgid ""
"This only works with two literals though, not with variables or "
"expressions::"
msgstr ""

#: ../../tutorial/introduction.rst:225
msgid ""
"If you want to concatenate variables or a variable and a literal, use "
"``+``::"
msgstr ""

#: ../../tutorial/introduction.rst:230
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""

#: ../../tutorial/introduction.rst:237
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string"
" of size one::"
msgstr ""

#: ../../tutorial/introduction.rst:247
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""

#: ../../tutorial/introduction.rst:256
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""

#: ../../tutorial/introduction.rst:258
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""

#: ../../tutorial/introduction.rst:266
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""

#: ../../tutorial/introduction.rst:274
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero,"
" an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""

#: ../../tutorial/introduction.rst:284
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""

#: ../../tutorial/introduction.rst:295
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and"
" *j*, respectively."
msgstr ""

#: ../../tutorial/introduction.rst:300
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""

#: ../../tutorial/introduction.rst:304
msgid "Attempting to use an index that is too large will result in an error::"
msgstr ""

#: ../../tutorial/introduction.rst:311
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""

#: ../../tutorial/introduction.rst:319
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""

#: ../../tutorial/introduction.rst:329
msgid "If you need a different string, you should create a new one::"
msgstr ""

#: ../../tutorial/introduction.rst:336
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr ""

#: ../../tutorial/introduction.rst:347
msgid ":ref:`textseq`"
msgstr ""

#: ../../tutorial/introduction.rst:346
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""

#: ../../tutorial/introduction.rst:351
msgid ":ref:`string-methods`"
msgstr ""

#: ../../tutorial/introduction.rst:350
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""

#: ../../tutorial/introduction.rst:354
msgid ":ref:`f-strings`"
msgstr ""

#: ../../tutorial/introduction.rst:354
msgid "String literals that have embedded expressions."
msgstr ""

#: ../../tutorial/introduction.rst:357
msgid ":ref:`formatstrings`"
msgstr ""

#: ../../tutorial/introduction.rst:357
msgid "Information about string formatting with :meth:`str.format`."
msgstr ""

#: ../../tutorial/introduction.rst:360
msgid ":ref:`old-string-formatting`"
msgstr ""

#: ../../tutorial/introduction.rst:360
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""

#: ../../tutorial/introduction.rst:367
msgid "Lists"
msgstr ""

#: ../../tutorial/introduction.rst:369
msgid ""
"Python knows a number of *compound* data types, used to group together other"
" values.  The most versatile is the *list*, which can be written as a list "
"of comma-separated values (items) between square brackets.  Lists might "
"contain items of different types, but usually the items all have the same "
"type. ::"
msgstr ""

#: ../../tutorial/introduction.rst:378
msgid ""
"Like strings (and all other built-in :term:`sequence` type), lists can be "
"indexed and sliced::"
msgstr ""

#: ../../tutorial/introduction.rst:388
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a new (shallow) copy of the "
"list::"
msgstr ""

#: ../../tutorial/introduction.rst:394
msgid "Lists also support operations like concatenation::"
msgstr ""

#: ../../tutorial/introduction.rst:399
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""

#: ../../tutorial/introduction.rst:409
msgid ""
"You can also add new items at the end of the list, by using the "
":meth:`~list.append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:417
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""

#: ../../tutorial/introduction.rst:436
msgid "The built-in function :func:`len` also applies to lists::"
msgstr ""

#: ../../tutorial/introduction.rst:442
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""

#: ../../tutorial/introduction.rst:458
msgid "First Steps Towards Programming"
msgstr ""

#: ../../tutorial/introduction.rst:460
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"*Fibonacci* series as follows::"
msgstr ""

#: ../../tutorial/introduction.rst:478
msgid "This example introduces several new features."
msgstr ""

#: ../../tutorial/introduction.rst:480
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""

#: ../../tutorial/introduction.rst:486
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``b < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""

#: ../../tutorial/introduction.rst:495
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""

#: ../../tutorial/introduction.rst:504
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""

#: ../../tutorial/introduction.rst:515
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""

#: ../../tutorial/introduction.rst:527
msgid "Footnotes"
msgstr "脚注"

#: ../../tutorial/introduction.rst:528
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted"
" as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you"
" can use ``(-3)**2``."
msgstr ""

#: ../../tutorial/introduction.rst:532
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
