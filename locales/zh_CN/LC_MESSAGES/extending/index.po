# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-05 15:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../extending/index.rst:5
msgid "Extending and Embedding the Python Interpreter"
msgstr ""

#: ../../extending/index.rst:7
msgid ""
"This document describes how to write modules in C or C++ to extend the "
"Python interpreter with new modules.  Those modules can not only define new "
"functions but also new object types and their methods.  The document also "
"describes how to embed the Python interpreter in another application, for "
"use as an extension language.  Finally, it shows how to compile and link "
"extension modules so that they can be loaded dynamically (at run time) into "
"the interpreter, if the underlying operating system supports this feature."
msgstr ""

#: ../../extending/index.rst:15
msgid ""
"This document assumes basic knowledge about Python.  For an informal "
"introduction to the language, see :ref:`tutorial-index`.  :ref:`reference-"
"index` gives a more formal definition of the language.  :ref:`library-index`"
" documents the existing object types, functions and modules (both built-in "
"and written in Python) that give the language its wide application range."
msgstr ""

#: ../../extending/index.rst:21
msgid ""
"For a detailed description of the whole Python/C API, see the separate "
":ref:`c-api-index`."
msgstr ""

#: ../../extending/index.rst:26
msgid "Recommended third party tools"
msgstr ""

#: ../../extending/index.rst:28
msgid ""
"This guide only covers the basic tools for creating extensions provided as "
"part of this version of CPython. Third party tools like Cython, ``cffi``, "
"SWIG and Numba offer both simpler and more sophisticated approaches to "
"creating C and C++ extensions for Python."
msgstr ""

#: ../../extending/index.rst:38
msgid ""
"`Python Packaging User Guide: Binary Extensions "
"<https://packaging.python.org/en/latest/extensions/>`_"
msgstr ""

#: ../../extending/index.rst:36
msgid ""
"The Python Packaging User Guide not only covers several available tools that"
" simplify the creation of binary extensions, but also discusses the various "
"reasons why creating an extension module may be desirable in the first "
"place."
msgstr ""

#: ../../extending/index.rst:43
msgid "Creating extensions without third party tools"
msgstr ""

#: ../../extending/index.rst:45
msgid ""
"This section of the guide covers creating C and C++ extensions without "
"assistance from third party tools. It is intended primarily for creators of "
"those tools, rather than being a recommended way to create your own C "
"extensions."
msgstr ""

#: ../../extending/index.rst:60
msgid "Embedding the CPython runtime in a larger application"
msgstr ""

#: ../../extending/index.rst:62
msgid ""
"Sometimes, rather than creating an extension that runs inside the Python "
"interpreter as the main application, it is desirable to instead embed the "
"CPython runtime inside a larger application. This section covers some of the"
" details involved in doing that successfully."
msgstr ""
